/**
 * SecureBiz mitigration strategy maturity level evaluation API
 * This is the SecureBiz mitigration strategy maturity level evaluation API.
 *
 * OpenAPI spec version: 2.2.1
 * Contact: shijiel@deakin.edu.au
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AdminsApi", () => {
  let instance: api.AdminsApi
  beforeEach(function() {
    instance = new api.AdminsApi(config)
  });

  test("addQuestion", () => {
    const body: api.Question = undefined
    return expect(instance.addQuestion(body, {})).resolves.toBe(null)
  })
  test("addQuestionCategory", () => {
    const body: api.Category = undefined
    return expect(instance.addQuestionCategory(body, {})).resolves.toBe(null)
  })
  test("adminlogin", () => {
    const body: api.Adminlogin = undefined
    return expect(instance.adminlogin(body, {})).resolves.toBe(null)
  })
  test("deleteFeedback", () => {
    const id: number = 789
    return expect(instance.deleteFeedback(id, {})).resolves.toBe(null)
  })
  test("deleteQuestion", () => {
    const questionNumber: number = 56
    return expect(instance.deleteQuestion(questionNumber, {})).resolves.toBe(null)
  })
  test("deleteQuestionCategory", () => {
    const id: string = "id_example"
    return expect(instance.deleteQuestionCategory(id, {})).resolves.toBe(null)
  })
  test("deleteUser", () => {
    const id: number = 789
    return expect(instance.deleteUser(id, {})).resolves.toBe(null)
  })
  test("getAllUser", () => {
    return expect(instance.getAllUser({})).resolves.toBe(null)
  })
  test("updateQuestion", () => {
    const questionNumber: number = 56
    const body: api.Question = undefined
    return expect(instance.updateQuestion(questionNumber, body, {})).resolves.toBe(null)
  })
  test("updateQuestionCategory", () => {
    const id: string = "id_example"
    const body: api.Category = undefined
    return expect(instance.updateQuestionCategory(id, body, {})).resolves.toBe(null)
  })
  test("updateUser", () => {
    const id: number = 789
    const body: api.User = undefined
    return expect(instance.updateUser(id, body, {})).resolves.toBe(null)
  })
})

describe("PublicApi", () => {
  let instance: api.PublicApi
  beforeEach(function() {
    instance = new api.PublicApi(config)
  });

  test("addFeedback", () => {
    const body: api.Feedback = undefined
    return expect(instance.addFeedback(body, {})).resolves.toBe(null)
  })
  test("addUser", () => {
    const body: api.User = undefined
    return expect(instance.addUser(body, {})).resolves.toBe(null)
  })
  test("generatePdfReport", () => {
    const body: api.Body = undefined
    return expect(instance.generatePdfReport(body, {})).resolves.toBe(null)
  })
  test("getAllFeedback", () => {
    return expect(instance.getAllFeedback({})).resolves.toBe(null)
  })
  test("getAllQuestionCategories", () => {
    const questionCategory: string = "questionCategory_example"
    return expect(instance.getAllQuestionCategories(questionCategory, {})).resolves.toBe(null)
  })
  test("getAllQuestions", () => {
    return expect(instance.getAllQuestions({})).resolves.toBe(null)
  })
  test("getCategoryQuestions", () => {
    const body: api.Body1 = undefined
    return expect(instance.getCategoryQuestions(body, {})).resolves.toBe(null)
  })
  test("getFeedback", () => {
    const id: number = 789
    return expect(instance.getFeedback(id, {})).resolves.toBe(null)
  })
  test("getQuestion", () => {
    const questionNumber: number = 56
    return expect(instance.getQuestion(questionNumber, {})).resolves.toBe(null)
  })
  test("getQuestionCategory", () => {
    const id: string = "id_example"
    return expect(instance.getQuestionCategory(id, {})).resolves.toBe(null)
  })
  test("getUser", () => {
    const id: number = 789
    return expect(instance.getUser(id, {})).resolves.toBe(null)
  })
  test("postCategoryCoreResult", () => {
    const body: api.Answersheet = undefined
    return expect(instance.postCategoryCoreResult(body, {})).resolves.toBe(null)
  })
  test("queryQuestionCategoryResult", () => {
    const id: string = "id_example"
    const body: api.Answersheet = {
  "value" : {
    "Questions" : [ {
      "_id" : "5fd4eb35aff4d46d146b4d8b",
      "QuestionCategory" : "Patch Applications",
      "QuestionLabel" : "Do you categorize organisation software and systems based on criticality?",
      "QuestionDescription" : "<h1>Question Text</h1>",
      "QuestionType" : "BOOLEAN",
      "Mitigation" : "Having the organizations software and systems organized based on their importance and criticality to the organization will add priority to the process of application patching, where software and systems that are considered more important will have precedence over those considered to be of lesser importance. It will also provide the company with a prioritized list of systems and software that can be reviewed and checked for functionality in the event of a network crash or reboot.",
      "QuestionSetNumber" : 2,
      "QuestionNumber" : 2,
      "QuestionCore" : true,
      "QuestionCoreNumber" : 0,
      "Validators" : "Yup.string().oneOf(['a','b','c']).required('Required')",
      "Answers" : [ {
        "Value" : "string",
        "Text" : "string",
        "QuestionNext" : 0,
        "QuestionNextCore" : 0
      } ]
    } ]
  }
}
    return expect(instance.queryQuestionCategoryResult(id, body, {})).resolves.toBe(null)
  })
})

